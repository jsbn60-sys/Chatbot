import sparql
from programy.config.brain.service import BrainServiceConfiguration
from programy.services.service import Service


# this should work most of the times
def get_query(question, lang):
    return (f"""
        SELECT *
        WHERE
             {{
        ?person_or_thing <http://www.w3.org/2000/01/rdf-schema#label> "{question}"@{lang}
        }} 
        """)


def query_factory(query, name, ):
    found = False
    searchable_name = None
    first_found = False
    first_name = None
    endpoint = 'http://dbpedia.org/sparql'
    result = sparql.query(endpoint, query)

    for row in result:
        values = sparql.unpack_row(row)[0].split("/")
        value = values[len(values) - 1]
        if not first_found:
            first_found = True
            first_name = value
        if value.split("_")[0] == name.split()[0]:
            searchable_name = value
            found = True

    return (found, searchable_name) if found else (first_found, first_name)


def get_result(searchable_name, lang):
    endpoint = 'http://dbpedia.org/sparql'
    abstract_page_query = (
        f"""
             SELECT ?label
             WHERE {{
             <http://dbpedia.org/resource/{searchable_name}>
            <http://www.w3.org/2000/01/rdf-schema#comment> ?label
            . FILTER (lang(?label) = '{lang}')}}
             """)

    query_result = sparql.query(endpoint, abstract_page_query)
    value = None  # stores the abstract ontology(object description)  of the page
    for row in query_result:  # loops once dont know how to get the values in the query_result so loop
        values = sparql.unpack_row(row)
        value = values[0]
        return value
    return value


class MyService(Service):
    def ask_question(self, client_context, question: str):
        question = question.strip()  # remove leading and trailing spaces
        found, searchable_name = query_factory(get_query(question, "de"), question)
        if found:
            value = get_result(searchable_name, "de")
            if value is not None:
                return value
        question = question.title()
        languages = ['de', 'en']
        # loops through german results, then for english results is the former is not found.
        for lang in languages:
            found, searchable_name = query_factory(get_query(question, "de"), question)
            if found:
                value = get_result(searchable_name, lang)
                if value is None:
                    found, searchable_name = query_factory(get_query(question, "en"), question)
                    value = get_result(searchable_name, lang)
            else:
                found, searchable_name = query_factory(get_query(question, "en"), question)
                value = get_result(searchable_name, lang)
            if value is not None:
                return value if (lang == "de") else "Die Seite is leider nicht auf Deutsch verf√ºgbar\n" + value
        return "No entry found try again"


a = MyService(BrainServiceConfiguration(""))
print(a.ask_question("", "Stephen Curry"))
